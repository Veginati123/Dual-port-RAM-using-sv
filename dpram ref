class ram_model;
  ram_trans mon_data1;
  ram_trans mon_data2;
  logic[63:0] ref_data[int];
  mailbox #(ram_trans) wr2rm;
  mailbox #(ram_trans) rd2rm;
  mailbox #(ram_trans) rm2sb;
  function new(mailbox #(ram_trans) wr2rm, mailbox #(ram_trans) rd2rm,
               mailbox #(ram_trans) rm2sb);
    this.wr2rm=wr2rm;
    this.rd2rm=rd2rm;
    this.rm2sb=rm2sb;
  endfunction
  task dual_mem_fun_write(ram_trans mon_data1);
    begin
      if(mon_data1.write)
        mem_write(mon_data1);
    end
  endtask
  task dual_mem_fun_read(ram_trans mon_data2);
    begin
      if(mon_data2_read)
        mem_read(mon_data2);
    end
  endtask
  task mem_write(ram_trans mon_data1);
    ref_data[mon_data1.wr_address] = mon_data1.data_in;
  endtask
  task mem_read(ram_trans mon_data2);
    if(ref_data.exists(mon_data2.rd_address)
       mem_data2.data_out= ref_data[mon_data2.rd_address];
       endtask
       virtual task start();
         fork
           begin
             fork
               begin
                 forever
                   begin
                     wr2rm.get(mon_data1);
                     dual_mem_fun_read(mon_data2);
                     rm2sb.put(mon_data2);
                   end
               end
             join
           end
         join_none
       endtask
      $finish;
endclass
